import heapq

# Define the goal state
GOAL = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]

# Directions for moving the empty space (up, down, left, right)
MOVES = [(-1, 0), (1, 0), (0, -1), (0, 1)]

def manhattan_distance(state):
    """Calculate the Manhattan distance heuristic."""
    distance = 0
    for r in range(3):
        for c in range(3):
            tile = state[r][c]
            if tile != 0:
                goal_r, goal_c = divmod(tile - 1, 3)
                distance += abs(goal_r - r) + abs(goal_c - c)
    return distance

def is_solvable(state):
    """Check if the 8-puzzle is solvable."""
    flat_state = [tile for row in state for tile in row]
    inv_count = 0
    for i in range(8):
        for j in range(i + 1, 9):
            if flat_state[i] and flat_state[j] and flat_state[i] > flat_state[j]:
                inv_count += 1
    return inv_count % 2 == 0

def get_neighbors(state):
    """Generate the neighboring states by moving the empty space."""
    neighbors = []
    empty_pos = [(r, c) for r in range(3) for c in range(3) if state[r][c] == 0][0]
    r, c = empty_pos
    
    for dr, dc in MOVES:
        new_r, new_c = r + dr, c + dc
        if 0 <= new_r < 3 and 0 <= new_c < 3:
            new_state = [row[:] for row in state]
            new_state[r][c], new_state[new_r][new_c] = new_state[new_r][new_c], new_state[r][c]
            neighbors.append(new_state)
    
    return neighbors

def a_star_search(start):
    """Solve the 8-puzzle using A* search algorithm."""
    if not is_solvable(start):
        return None

    # Priority queue for A* search: stores (f_score, g_score, state, path)
    open_list = []
    heapq.heappush(open_list, (manhattan_distance(start), 0, start, []))
    visited = set()

    while open_list:
        f, g, state, path = heapq.heappop(open_list)

        if state == GOAL:
            return path
        
        visited.add(tuple(map(tuple, state)))  # Add the state to visited

        for neighbor in get_neighbors(state):
            if tuple(map(tuple, neighbor)) not in visited:
                new_g = g + 1
                new_f = new_g + manhattan_distance(neighbor)
                heapq.heappush(open_list, (new_f, new_g, neighbor, path + [neighbor]))

    return None

def print_puzzle(state):
    """Print the puzzle state in a readable format."""
    for row in state:
        print(' '.join(str(tile) for tile in row))
    print()

# Example usage
start_state = [[1, 2, 3], [4, 5, 6], [7, 0, 8]]  # Initial scrambled state
solution = a_star_search(start_state)

if solution:
    print("Solution found!")
    for step in solution:
        print_puzzle(step)
else:
    print("No solution found.")
