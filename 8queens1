def print_board(board):
    for row in board:
        print(" ".join(['Q' if x == 1 else '.' for x in row]))
    print()

def is_safe(board, row, col):
    for i in range(row):
        if board[i][col] == 1:  # Check column
            return False
        if col - (row - i) >= 0 and board[i][col - (row - i)] == 1:  # Check upper-left diagonal
            return False
        if col + (row - i) < len(board) and board[i][col + (row - i)] == 1:  # Check upper-right diagonal
            return False
    return True

def solve_8_queens(board, row):
    if row == len(board):
        print_board(board)
        return True

    for col in range(len(board)):
        if is_safe(board, row, col):
            board[row][col] = 1
            if solve_8_queens(board, row + 1):
                return True
            board[row][col] = 0  # Backtrack

    return False

def solve():
    board = [[0 for _ in range(8)] for _ in range(8)]
    if not solve_8_queens(board, 0):
        print("Solution does not exist")
    else:
        print("Solution found:")

solve()
